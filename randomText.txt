#Padding and reshaping for extraction
    #         rows, cols = cols, rows
    #         R, G, B = np.array(R).reshape((cols,rows)), np.array(G).reshape((cols,rows)), np.array(B).reshape((cols,rows))
    #         R, G, B = np.pad(R,1,'constant'), np.pad(G,1,'constant'), np.pad(B,1,'constant')
    

    #         #Processing red pixels
    #         leftR, rightR   = R[1:rows+1,0:cols], R[1:rows+1,2:cols+2]
    #         topR, bottomR   = R[0:rows,1:cols+1], R[2:rows+2,1:cols+1]
    #         currentR        = R[1:rows+1, 1:cols+1]
    #         R               = np.pad(timeStepUpdate(currentR, leftR, rightR, topR, bottomR), 1, 'constant')


    #         #Processing blue pixels
    #         leftB, rightB   = B[1:rows+1,0:cols], B[1:rows+1,2:cols+2]
    #         topB, bottomB   = B[0:rows,1:cols+1], B[2:rows+2,1:cols+1]
    #         currentB        = B[1:rows+1, 1:cols+1]
    #         B               = np.pad(timeStepUpdate(currentB, leftB, rightB, topB, bottomB), 1, 'constant')



    #         #Processing green pixels
    #         leftG, rightG   = G[1:rows+1,0:cols], G[1:rows+1,2:cols+2]
    #         topG, bottomG   = G[0:rows,1:cols+1], G[2:rows+2,1:cols+1]
    #         currentG        = G[1:rows+1, 1:cols+1]
    #         G               = np.pad(timeStepUpdate(currentG, leftG, rightG, topG, bottomG), 1, 'constant')


    #         #Put together image and display
    #         rows, cols = cols, rows
    #         R, G, B = extract(R,rows,cols)  ,  extract(G,rows,cols),   extract(B,rows,cols)

    #         #Swap back rows and columns to display correctly
    #         rows, cols = cols, rows
    #         R, G, B = R.reshape((1,rows*cols))[0], G.reshape((1,rows*cols))[0], B.reshape((1,rows*cols))[0]
    #         result = np.vstack(( R, G, B ))
    #         result = result.T
    #         result = result.reshape(rows,cols,3)

    #         image_vals.append(result)
    #         ax.set_title('Blurring {} using heat equation'.format(fileNames[index]),fontsize=18)
    #         ax.set_xlabel("Time steps: {}".format(t))
    #         image = plt.imshow(result, cmap=plt.cm.gray)

    #         print("Processed {}".format(t))

    #         #Stitching
    #         writer.grab_frame()
    #         plt.cla()